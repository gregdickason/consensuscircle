from ecdsa import SigningKey, VerifyingKey, NIST256p
import hashlib
import ecdsa

ENCODING = 'utf-8'

# generation test (test in browser)

sk = SigningKey.generate(curve=NIST256p)

sk_string = sk.to_string()

vk = sk.get_verifying_key()

vk_string = vk.to_string()

print('Private Key')
print(sk_string.hex())

print('Public Key')
print(vk_string.hex())

signature = sk.sign_deterministic(str("aaa").encode(ENCODING), hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)

assert vk.verify(signature, str("aaa").encode(ENCODING), hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)

print('signature')
print(signature.hex())

# import test (test details generated by browswer)

#MUST REMOVE 04 padding from jsrsasign -
jsGenPublicKey = '6e892457c8c3452595d595ef029cb7e5260ab4da44712a4c09b61971ae75b5a0828b2e9987df12007d7aad579bda3bf7c1b8a6dd963568ec4487a97115a2cd01'

jsGenSignature = '3044022051e084b33cc8f7f9e0f29760c10e0f4d532eada774a514938c6e5d3ced16abb4022058587e532598837808c20c86997f4f7e19b83a2f418d103185a3d5167d9fe3ce'

jsVk = VerifyingKey.from_string(bytes.fromhex(jsGenPublicKey), curve=NIST256p)

result = jsVk.verify(bytes.fromhex(jsGenSignature), str("aaa").encode(ENCODING), hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)
print(result)
